import { supabase } from "@/integrations/supabase/client";
import { CleanMember } from "./dataTransform";

async function ensureCollectorExists(collectorName: string): Promise<string> {
  console.log('Checking collector:', collectorName);
  
  // First try to find existing collector
  const { data: existingCollector, error: findError } = await supabase
    .from('collectors')
    .select('id')
    .eq('name', collectorName)
    .single();

  if (existingCollector) {
    console.log('Found existing collector:', existingCollector);
    return existingCollector.id;
  }

  // If not found, get the next number
  const { data: lastCollector } = await supabase
    .from('collectors')
    .select('number')
    .order('number', { ascending: false })
    .limit(1)
    .single();

  const nextNumber = lastCollector 
    ? String(Number(lastCollector.number) + 1).padStart(2, '0')
    : '01';

  console.log('Creating new collector with number:', nextNumber);

  // Create new collector
  const { data: newCollector, error: insertError } = await supabase
    .from('collectors')
    .insert({
      name: collectorName,
      prefix: collectorName.substring(0, 2).toUpperCase(),
      number: nextNumber,
    })
    .select('id')
    .single();

  if (insertError) {
    console.error('Error creating collector:', insertError);
    throw new Error(`Failed to create collector: ${insertError.message}`);
  }

  console.log('Created new collector:', newCollector);
  return newCollector.id;
}

export async function insertMemberData(transformedData: CleanMember[]) {
  console.log('Starting batch insert of member data');
  
  for (const member of transformedData) {
    try {
      // Ensure collector exists and get ID
      const collectorId = await ensureCollectorExists(member.collector);
      console.log('Using collector ID:', collectorId);

      // Insert member with empty member_number (trigger will generate it)
      const { data: memberData, error: memberError } = await supabase
        .from('members')
        .insert({
          collector_id: collectorId,
          full_name: member.name || member.fullName,
          address: member.address,
          status: 'active',
          verified: member.verified,
          member_number: '', // Will be generated by trigger
          email: member.email || null,
          gender: member.gender || null,
          marital_status: member.maritalStatus || null,
          phone: member.mobileNo || null,
          date_of_birth: member.dateOfBirth || null,
          postcode: member.postCode || null,
          town: member.town || null
        })
        .select()
        .single();

      if (memberError) {
        console.error('Error inserting member:', memberError);
        throw memberError;
      }

      console.log('Successfully inserted member:', memberData);

      // Insert admin notes if any
      if (member.notes && Array.isArray(member.notes)) {
        const { error: notesError } = await supabase
          .from('admin_notes')
          .insert(
            member.notes.map((note: string) => ({
              member_id: memberData.id,
              note: note
            }))
          );

        if (notesError) {
          console.error('Error inserting notes:', notesError);
        }
      }

      console.log(`Successfully processed member: ${member.name || member.fullName}`);
    } catch (error) {
      console.error('Error processing member:', error);
      throw error;
    }
  }
}